/**Key Switch NL2 LightSwitch**
	Author: David Wolfe (Red-Thirten)
	Date: 9/21/2022
	Extends LightSwitch to handle placard and switch properties of the Key Switch model.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import util.OperatorSwitch;
import util.OperatorPlacard;

public class KeySwitch extends LightSwitch{
	private String PLACARD_ELEMENT_NAME = "placard";		// Name of the placard element in the SCO/model
	private static final String KEY_ELEMENT_NAME = "key";	// Name of the key element in the SCO/model
	private static final float KEY_TRAVEL_DIST = 0.04f;		// Distance the key travels out of the switch, in meters
	
    public final bool onLateInit(){		
        super.SCRIPT_NAME = "KeySwitch";	// Script name for debugging
		super.ON_ANGLE = 45.f;				// Angle from the model's original switch position to appear on
		super.OFF_ANGLE = -45.f;			// Angle from the model's original switch position to appear off
		super.COOLDOWN = 2.f;				// Cooldown (in seconds) before the switch can be switched again
		super.SWITCH_TRAVEL_TIME = 0.6f;	// Time, in seconds, for the switch to travel ("speed")
		super.AXIS = 2;						// Axis values: 0 = x, 1 = y, 2 = z
		
		OperatorPlacard.setPlacardTextureFromScoParams( // Set placard texture using external class
			getScoFromParentEntity(),
			super.getElementOnScoForName(getScoFromParentEntity(), PLACARD_ELEMENT_NAME)
		);
		
        super.onLateInit();
		
		if (getElementOnScoForName(getScoFromParentEntity(), KEY_ELEMENT_NAME) == null) return false; // Check for key
		super.switches[0] = new OperatorSwitch( // Setup key switch
			getElementOnScoForName(getScoFromParentEntity(), SWITCH_ELEMENT_PREFIX + "1"),
			2,
			getScoFromParentEntity().getBooleanParameter("initial_state" + 1).boolValue() ? 1 : 0,
			OFF_ANGLE,
			ON_ANGLE,
			AXIS,
			SWITCH_TRAVEL_TIME,
			getElementOnScoForName(getScoFromParentEntity(), KEY_ELEMENT_NAME),
			KEY_TRAVEL_DIST,
			false
		);
		
		return (switches[0] != null);
    }
}