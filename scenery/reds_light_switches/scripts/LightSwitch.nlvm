/**
 	Light Switch NL2 Script
	Author: David Wolfe (Red-Thirten)
	Contributors: parker02311
	Date: 06/08/2024
	Detects user input to switch, animates switch SCO, plays sounds, and controls the lights of specified SCOs in the simulation.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import com.nolimitscoaster.Script;
import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.InteractionActionListener;
import com.nolimitscoaster.InteractionObject;
import com.nolimitscoaster.ResourcePath;

import obj.OperatorSwitch;
import obj.LightGroup;
import util.SceneObjectTools;

public class LightSwitch extends Script implements InteractionActionListener{	
	protected String SCRIPT_NAME = "LightSwitch";			// Script name for debugging
	protected String SWITCH_ELEMENT_PREFIX = "switch";		// Prefix of the switch element names in the SCO/model
	protected float ON_ANGLE = 0.f;							// Angle from the model's original switch position to appear on
	protected float OFF_ANGLE = 75.f;						// Angle from the model's original switch position to appear off
	protected float COOLDOWN = 0.25f;						// Cooldown (in seconds) before the switch can be switched again
	protected float ACTIVE_DIST = 0.04f;					// Distance (in meters) between the player and the switch where the switch is active
	protected float SWITCH_TRAVEL_TIME = 0.025f;			// Time (in seconds) for the switch to travel ("speed")
	protected int AXIS = 0;									// Axis values: 0 = x, 1 = y, 2 = z
	
	protected SceneObject sco;
	
	private bool flipped, firstSwitchViewed = false;
	private float curCooldownTime = 0.f;
	
	protected InteractionObject[] interactionObjects;
	protected OperatorSwitch[] switches;
	protected LightGroup[] switchLights, switchLightsInv;
	
	public bool onLateInit(){ // On initialization of Play simulation
		// Get and assign local sco
		sco = SceneObjectTools.getSceneObjectForEntityId(
			sim,
			getParentEntityId(),
			SCRIPT_NAME
		);
		
		int numSwitches = 1;
		// Check for at least one switch
		SceneObjectTools.getElementForName(sco, SWITCH_ELEMENT_PREFIX + numSwitches, SCRIPT_NAME);
		// Find number of switches
		while (sco.getElementForName(SWITCH_ELEMENT_PREFIX + numSwitches) != null) numSwitches++;
		--numSwitches;
		// Initialize arrays
		interactionObjects = new InteractionObject[numSwitches];
		switches = new OperatorSwitch[numSwitches];
		switchLights = new LightGroup[numSwitches];
		switchLightsInv = new LightGroup[numSwitches];
		
		// Iterate through switches for setup			
		for (int i = 0; i < numSwitches; i++){
			// Get sound Resource Paths
			ResourcePath[] soundPaths = new ResourcePath[]{
				this.getResourcePathForId("sound_on"),
				this.getResourcePathForId("sound_off")
			};
			// Setup switches
			switches[i] = new OperatorSwitch(
				sco.getElementForName(SWITCH_ELEMENT_PREFIX + (i+1)),
				soundPaths,
				2,
				OFF_ANGLE,
				ON_ANGLE,
				AXIS,
				SWITCH_TRAVEL_TIME
			);
			// Set initial state
			switches[i].setSwitchState(
				sco.getBooleanParameter("initial_state" + (i+1)).boolValue() ? 1 : 0
			);
			
			// Setup interaction objects
			interactionObjects[i] = InteractionObject.createSimpleButton();
			interactionObjects[i].addActionListener(this);
			interactionObjects[i].setPosition(switches[i].getAbsoluteTranslation());
			interactionObjects[i].setRadius(ACTIVE_DIST);
			
			// Setup light groups
			String lightsName = sco.getStringParameter("lights_name" + (i+1));
			String lightsNameInv = sco.getStringParameter("lights_name_inv" + (i+1));
			if (lightsName.length() > 0){ // Regular
				SceneObject[] lightSCOs = sim.getSceneObjectsWithName(lightsName);
				if (lightSCOs.length != 0){
					switchLights[i] = new LightGroup(
						lightSCOs,
						SWITCH_TRAVEL_TIME / 2,
						sco.getDoubleParameter("flicker_time").floatValue(),
						sco.getDoubleParameter("override_interval").floatValue(),
						!sco.getBooleanParameter("disable_ent_color").boolValue(),
						(switches[i].getCurrentState() != 0)
					);
				}
				else{
					System.err.println(SCRIPT_NAME + ": (Switch " + (i+1) + ") Could not find any light SCOs with the name \"" + lightsName + "\"!");
					return false;
				}
			}
			if (lightsNameInv != null && lightsNameInv.length() > 0){ // Inverse
				SceneObject[] lightSCOsInv = sim.getSceneObjectsWithName(lightsNameInv);
				if (lightSCOsInv.length != 0){
					switchLightsInv[i] = new LightGroup(
						lightSCOsInv,
						SWITCH_TRAVEL_TIME / 2,
						sco.getDoubleParameter("flicker_time").floatValue(),
						sco.getDoubleParameter("override_interval").floatValue(),
						!sco.getBooleanParameter("disable_ent_color").boolValue(),
						(switches[i].getCurrentState() == 0)
					);
				}
				else{
					System.err.println(SCRIPT_NAME + ": (Switch " + (i+1) + ") Could not find any light SCOs with the name \"" + lightsNameInv + "\"!");
					return false;
				}
			}
		}
		
		return true;
	}

	public void onInteractionAction(InteractionObject interactionObject){
		if (flipped) return;

		int i = 0;
		while (interactionObject != interactionObjects[i]) i++;

		if (switches[i].getCurrentState() != 0){
			switches[i].setSwitchState(0);
		}
		else{
			switches[i].setSwitchState(1);
		}
		if (switchLights[i] != null) switchLights[i].toggleLights();
		if (switchLightsInv[i] != null) switchLightsInv[i].toggleLights();
		flipped = true;

		for (int j = 0; j < interactionObjects.length; j++){
			interactionObjects[j].setEnabled(false);
		}
	}

	public void onNextFrame(float tick){
		if (flipped){
			curCooldownTime = curCooldownTime + tick;
			if (curCooldownTime > COOLDOWN){
				curCooldownTime = 0.f;
				flipped = false;
				for (int j = 0; j < interactionObjects.length; j++){
					interactionObjects[j].setEnabled(true);
				}
			}
		}
		
		for (int i = switches.length-1; i >= 0; --i){ // Run each switch, switchLight, and switchLightsInv objects' onNextFrame() to animate
			switches[i].onNextFrame(tick);
			if (switchLights[i] != null) switchLights[i].onNextFrame(tick);
			if (switchLightsInv[i] != null) switchLightsInv[i].onNextFrame(tick);
		}
	}	
}