/**
 	Light Switch NL2 Script
	Author: David Wolfe (Red-Thirten)
	Contributors: parker02311
	Date: 08/01/2024
	Detects user input to switch, animates switch SCO, plays sounds, and controls the lights of specified SCOs in the simulation.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import com.nolimitscoaster.Script;
import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.InteractionActionListener;
import com.nolimitscoaster.InteractionObject;
import com.nolimitscoaster.ResourcePath;

import obj.OperatorSwitch;
import obj.LightGroup;
import util.SceneObjectTools;

public class LightSwitch extends Script implements InteractionActionListener{	
	protected String SCRIPT_NAME = "LightSwitch";			// Script name for debugging
	protected String SWITCH_ELEMENT_PREFIX = "switch";		// Prefix of the switch element names in the SCO/model
	protected float ON_ANGLE = 0.f;							// Angle from the model's original switch position to appear on
	protected float OFF_ANGLE = 75.f;						// Angle from the model's original switch position to appear off
	protected float COOLDOWN_TIME = 0.25f;						// Cooldown (in seconds) before the switch can be switched again
	protected float ACTIVE_DIST = 0.04f;					// Distance (in meters) between the player and the switch where the switch is active
	protected float SWITCH_TRAVEL_TIME = 0.025f;			// Time (in seconds) for the switch to travel ("speed")
	protected int AXIS = 0;									// Axis values: 0 = x, 1 = y, 2 = z
	private static final float SUN_ELEVATION_LIMIT = (float) Math.toRadians(18.0);	// 18 degrees is the default sun angle limit for vanilla SCO lights to turn on and off
	
	protected SceneObject sco;
	
	private bool isDay = sim.getCurSunElevation() > SUN_ELEVATION_LIMIT;
	private bool[] switchDaylightSensorEnabled;
	private float curCooldownTime = 0.f;
	
	protected InteractionObject[] interactionObjects;
	protected OperatorSwitch[] switches;
	protected LightGroup[] switchLights, switchLightsInv;
	
	public bool onLateInit(){ // On initialization of Play simulation
		// Get and assign local sco
		sco = SceneObjectTools.getSceneObjectForEntityId(
			sim,
			getParentEntityId(),
			SCRIPT_NAME
		);
		
		// Check for at least one switch
		SceneObjectTools.getElementForName(sco, SWITCH_ELEMENT_PREFIX + "1", SCRIPT_NAME);
		// Find number of switches
		int numSwitches = 0;
		while (sco.getElementForName(SWITCH_ELEMENT_PREFIX + (numSwitches+1)) != null)
			numSwitches++;
		// Initialize arrays
		interactionObjects = new InteractionObject[numSwitches];
		switches = new OperatorSwitch[numSwitches];
		switchLights = new LightGroup[numSwitches];
		switchLightsInv = new LightGroup[numSwitches];
		switchDaylightSensorEnabled = new bool[numSwitches];
		
		// Iterate through switches for setup			
		for (int i = 0; i < numSwitches; i++){
			// Get sound Resource Paths
			ResourcePath[] soundPaths = new ResourcePath[]{
				this.getResourcePathForId("sound_on"),
				this.getResourcePathForId("sound_off")
			};
			// Setup switches
			switches[i] = new OperatorSwitch(
				sco.getElementForName(SWITCH_ELEMENT_PREFIX + (i+1)),
				soundPaths,
				2,
				OFF_ANGLE,
				ON_ANGLE,
				AXIS,
				SWITCH_TRAVEL_TIME
			);
			// Set initial state
			switches[i].setSwitchState(
				sco.getBooleanParameter("initial_state" + (i+1)).boolValue() ? 1 : 0
			);
			// Set if daylight sensor is enabled
			switchDaylightSensorEnabled[i] = sco.getBooleanParameter("daylight_sensor" + (i+1)).boolValue();
			
			// Setup interaction objects
			interactionObjects[i] = InteractionObject.createSimpleButton();
			interactionObjects[i].addActionListener(this);
			interactionObjects[i].setPosition(switches[i].getAbsoluteTranslation());
			interactionObjects[i].setRadius(ACTIVE_DIST);
			
			// Setup light groups
			String lightsName = sco.getStringParameter("lights_name" + (i+1));
			String lightsNameInv = sco.getStringParameter("lights_name_inv" + (i+1));
			if (lightsName.length() > 0){ // Regular
				SceneObject[] lightSCOs = sim.getSceneObjectsWithName(lightsName);
				if (lightSCOs.length != 0){
					switchLights[i] = new LightGroup(
						lightSCOs,
						SWITCH_TRAVEL_TIME / 2,
						sco.getDoubleParameter("flicker_time").floatValue(),
						sco.getDoubleParameter("override_interval").floatValue(),
						!sco.getBooleanParameter("disable_ent_color").boolValue(),
						(switches[i].getCurrentState() != 0)
					);
				}
				else{
					System.err.println(SCRIPT_NAME + ": (Switch " + (i+1) + ") Could not find any light SCOs with the name \"" + lightsName + "\"!");
					return false;
				}
			}
			if (lightsNameInv != null && lightsNameInv.length() > 0){ // Inverse
				SceneObject[] lightSCOsInv = sim.getSceneObjectsWithName(lightsNameInv);
				if (lightSCOsInv.length != 0){
					switchLightsInv[i] = new LightGroup(
						lightSCOsInv,
						SWITCH_TRAVEL_TIME / 2,
						sco.getDoubleParameter("flicker_time").floatValue(),
						sco.getDoubleParameter("override_interval").floatValue(),
						!sco.getBooleanParameter("disable_ent_color").boolValue(),
						(switches[i].getCurrentState() == 0)
					);
				}
				else{
					System.err.println(SCRIPT_NAME + ": (Switch " + (i+1) + ") Could not find any light SCOs with the name \"" + lightsNameInv + "\"!");
					return false;
				}
			}
		}
		
		return true;
	}

	public void onInteractionAction(InteractionObject interactionObject){
		for (int i = 0; i < interactionObjects.length; i++){
			// Disable all switch interactions for cooldown
			interactionObjects[i].setEnabled(false);
			// Flip the switch at the index of the matching InteractionObject
			if (interactionObject == interactionObjects[i])
				flipSwitch(i);
		}
	}

	public void onNextFrame(float tick){
		// If any switch interaction is disabled, it was clicked, so do cooldown
		if (!interactionObjects[0].isEnabled()){
			curCooldownTime = curCooldownTime + tick;
			if (curCooldownTime > COOLDOWN_TIME){
				curCooldownTime = 0.f;
				for (int i = interactionObjects.length-1; i >= 0; --i){
					interactionObjects[i].setEnabled(true);
				}
			}
		}

		// Daylight Sensor Check
		if (isDay != sim.getCurSunElevation() > SUN_ELEVATION_LIMIT){
			isDay = !isDay;
			for (int i = switches.length-1; i >= 0; --i){
				if (switchLights[i] != null
						&& switchDaylightSensorEnabled[i]
						&& (isDay == switchLights[i].isOn())){
					flipSwitch(i);
				}
			}
		}

		// Run each switch, switchLight, and switchLightsInv objects' onNextFrame() to animate
		for (int i = switches.length-1; i >= 0; --i){
			switches[i].onNextFrame(tick);
			if (switchLights[i] != null) switchLights[i].onNextFrame(tick);
			if (switchLightsInv[i] != null) switchLightsInv[i].onNextFrame(tick);
		}
	}

	private void flipSwitch(int switchIndex){
		switches[switchIndex].toggleSwitch();
		if (switchLights[switchIndex] != null) switchLights[switchIndex].toggleLights();
		if (switchLightsInv[switchIndex] != null) switchLightsInv[switchIndex].toggleLights();
	}
}