/**Covered Switch NL2 LightSwitch**
	Author: David Wolfe (Red-Thirten)
	Date: 10/21/2022
	Extends LightSwitch to handle the lid cover and switch properties of the Covered Switch model.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import com.nolimitscoaster.SceneObjectElement;
import com.nolimitscoaster.Tools;

public class CoveredSwitch extends LightSwitch{
	private static final String LID_ELEMENT_NAME = "lid";							// Name of the lid element in the SCO/model
	private static final double LID_CLOSED_ANGLE = Math.toRadians(150.f);			// Angle for lid to appear closed (it starts open in the model)
	private static final double DELTA_T = 1.5f;										// Time (in seconds) for the lid to rotate ("speed")
	private static final double DELTA_Ta = DELTA_T/2.f;								// (De)Acceleration window is the first and last half of the animation (whole animation)
	
	private SceneObjectElement lid;
	
	private bool animateLid, lidOpen = false;
	private double t = 0;
	
    public final bool onLateInit(){		
        super.SCRIPT_NAME = "CoveredSwitch";	// Script name for debugging
		super.ON_ANGLE = -120.f;				// Angle from the model's original switch position to appear on
		super.OFF_ANGLE = 0.f;					// Angle from the model's original switch position to appear off
		super.ACTIVE_DIST = 0.9f;				// Distance (in meters) between the player and the switch where the switch is active
		
        if ( super.onLateInit() ){
			lid = super.sco.getElementForName(LID_ELEMENT_NAME); // Initialize and setup lid
			if (lid == null){
				System.err.println(SCRIPT_NAME + ": Wrong 3d model loaded (Cannot find \"" + LID_ELEMENT_NAME + "\" element)");
				return false;
			}
			lid.setRotation((float) LID_CLOSED_ANGLE, 0.f, 0.f);
			
			return true;
		}
		else return false;
    }
	
	public void onNextFrame(float tick){
		super.onNextFrame(tick);
		
		if (animateLid){ // If set to animate...
			if (t > DELTA_T){ // If animation done
				lidOpen = !lidOpen;
				animateLid = false;
				t = 0;
			}
			else if (lidOpen){ // Close lid
				lid.setRotation(
					(float) Tools.switchRampC2(DELTA_T, LID_CLOSED_ANGLE, DELTA_Ta, t),
					0.f,
					0.f
				);
			}
			else{ // Open lid
				lid.setRotation(
					(float) (LID_CLOSED_ANGLE - Tools.switchRampC2(DELTA_T, LID_CLOSED_ANGLE, DELTA_Ta, t)),
					0.f,
					0.f
				);
			}
			t += tick;
		}
		else if (sim.isViewerInsideSphere(super.sco.getTranslation(), super.ACTIVE_DIST)){ // If inside active distance...
			if (!lidOpen){ // ...and lid is not open, animate
				animateLid = true;
			}
		}
		else if (lidOpen){ // If not inside active distance and lid is open, animate
			animateLid = true;
		}
	}
}