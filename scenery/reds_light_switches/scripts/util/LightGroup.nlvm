/**Light Group NL2 Class**
	Author: David Wolfe (Red-Thirten)
	Date: 12/21/2022
	A Java object representing a group of SCOs with lights that can have the state of their lights changed over time.
	Licensed under GNU GPLv3 - See LICENSE for more details.

	Constructors:
		LightGroup(SceneObject[] scos, float delayTime, float flickerTime, float overrideInterval, bool entColorEnabled, bool initState) -- Default object constructor

	Methods:
        void setDelayTime(float time) -- Set the delay time.
		void toggleLights() -- Toggle the lights' state (on/off).
		void onNextFrame(float tick) -- Call to animate lights.
*/

package util;

import com.nolimitscoaster.SceneObject;
import nlvm.math3d.Vector3f;
import nlvm.math3d.Vector4f;
import nlvm.lang.Math;

public class LightGroup{
    // Semi-static (set only once during construction)
    private bool ENT_COLOR_ENABLED;
    private float FLICKER_TIME, OVERRIDE_INTERVAL;
    private SceneObject[] SCOS;
    private Vector3f[][] ORIG_LIGHT_COLORS;

    private bool delay, flicker, curState = false;
    private float curTime, overrideTime, delayTime = 0.f;
    
	private Vector4f entColor = new Vector4f(1,1,1,0);

	public LightGroup(SceneObject[] scos, float delayTime, float flickerTime, float overrideInterval, bool entColorEnabled, bool initState){ // Default object constructor
		SCOS = scos;
        this.delayTime = delayTime;
        FLICKER_TIME = flickerTime;
        OVERRIDE_INTERVAL = overrideInterval; // Get overrideInterval value as a "watchdog" backup to further enforce switch and light synchronization
        ENT_COLOR_ENABLED = entColorEnabled;
        curState = initState;

        ORIG_LIGHT_COLORS = new Vector3f[SCOS.length][];

        for (int i = 0; i < SCOS.length; i++){
            ORIG_LIGHT_COLORS[i] = new Vector3f[SCOS[i].getLightCount()];
            for (int j = 0; j < SCOS[i].getLightCount(); j++){
                ORIG_LIGHT_COLORS[i][j] = new Vector3f();
                SCOS[i].getLightAt(j).getColor(ORIG_LIGHT_COLORS[i][j]);
            }
        }

        // Attempt to set lights to match switch state (even though their script will likely override it in the first few seconds of simulation...)
        setLightsEnabled(initState);
	}

    public void setDelayTime(float time){
        delayTime = time;
    }

    public void toggleLights(){
        curState = !curState;
        flicker = false;
        delay = true;
        curTime = 0.f;
    }
	
	public void onNextFrame(float tick){
        if (delay){
            if (curTime < delayTime) curTime += tick;
            else{
                delay = false;
                if (curState && FLICKER_TIME > 0){
                    curTime = 0.f;
                    flicker = true;
                }
                else{
                    if (curState)
                        setLightsEnabled(true);
                    else
                        setLightsEnabled(false);
                }
            }
        }
        else if (flicker){
            if (curTime < FLICKER_TIME){
                setLightsIntensity( (curTime/FLICKER_TIME) * ((float) Math.random()) ); // Flicker
                curTime += tick;
            }
            else{
                flicker = false;
                setLightsEnabled(true);
            }
        }
        else if (OVERRIDE_INTERVAL > 0.f){
			overrideTime += tick;
			if (overrideTime > OVERRIDE_INTERVAL){
				overrideTime = 0.f;
				setLightsEnabled(curState);
			}
		}
	}

    private void setLightsIntensity(float intensity){
        for (int i = SCOS.length-1; i >= 0; --i){
            for (int j = SCOS[i].getLightCount()-1; j >= 0; --j){
                if (intensity > 0){
                    if (SCOS[i].getLightAt(j).isEnabled() == false)
                        SCOS[i].getLightAt(j).setEnabled(true);

                    SCOS[i].getLightAt(j).setColor(
                        ORIG_LIGHT_COLORS[i][j].x * intensity,
                        ORIG_LIGHT_COLORS[i][j].y * intensity,
                        ORIG_LIGHT_COLORS[i][j].z * intensity
                    );
                }
                else{
                    SCOS[i].getLightAt(j).setEnabled(false);
                }

                if (ENT_COLOR_ENABLED){
                    entColor.w = intensity;
                    SCOS[i].setEntityColor(entColor);
                }
            }
        }
    }

    private void setLightsEnabled(bool state){
        if (state)
            setLightsIntensity(1.f);
        else
            setLightsIntensity(0.f);
    }
}